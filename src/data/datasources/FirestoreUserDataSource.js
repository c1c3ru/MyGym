import { doc, getDoc, setDoc, updateDoc, deleteDoc } from 'firebase/firestore';
import { db } from '@services/firebase';
import { User } from '@/domain/entities/User';

/**
 * FirestoreUserDataSource - Data Layer
 * Implementa opera√ß√µes de usu√°rio usando Firestore
 */
export class FirestoreUserDataSource {
  constructor() {
    this.collection = 'users';
  }

  /**
   * Buscar usu√°rio por ID
   */
  async getUserById(userId) {
    try {
      console.log('üîç FirestoreUserDataSource.getUserById:', userId);
      
      const userDoc = await getDoc(doc(db, this.collection, userId));
      
      if (userDoc.exists()) {
        const userData = { id: userId, ...userDoc.data() };
        console.log('‚úÖ FirestoreUserDataSource: Usu√°rio encontrado');
        
        return new User(userData);
      }
      
      console.log('‚ùå FirestoreUserDataSource: Usu√°rio n√£o encontrado');
      return null;
    } catch (error) {
      console.error('‚ùå FirestoreUserDataSource.getUserById:', error);
      throw error;
    }
  }

  /**
   * Salvar usu√°rio (criar ou atualizar)
   */
  async saveUser(userData) {
    try {
      console.log('üíæ FirestoreUserDataSource.saveUser:', userData.id);
      
      // Converter User entity para objeto plain se necess√°rio
      const dataToSave = userData instanceof User ? userData.toJSON() : userData;
      
      // Remover o ID do objeto de dados (usado apenas como chave do documento)
      const { id, ...userDataWithoutId } = dataToSave;
      
      // Adicionar timestamp de atualiza√ß√£o
      userDataWithoutId.updatedAt = new Date();
      
      await setDoc(doc(db, this.collection, id), userDataWithoutId);
      
      console.log('‚úÖ FirestoreUserDataSource: Usu√°rio salvo com sucesso');
      
      return new User({ id, ...userDataWithoutId });
    } catch (error) {
      console.error('‚ùå FirestoreUserDataSource.saveUser:', error);
      throw error;
    }
  }

  /**
   * Atualizar usu√°rio parcialmente
   */
  async updateUser(userId, updates) {
    try {
      console.log('üîÑ FirestoreUserDataSource.updateUser:', userId, updates);
      
      // Adicionar timestamp de atualiza√ß√£o
      const updatesWithTimestamp = {
        ...updates,
        updatedAt: new Date()
      };
      
      await updateDoc(doc(db, this.collection, userId), updatesWithTimestamp);
      
      console.log('‚úÖ FirestoreUserDataSource: Usu√°rio atualizado com sucesso');
      
      // Buscar e retornar o usu√°rio atualizado
      return await this.getUserById(userId);
    } catch (error) {
      console.error('‚ùå FirestoreUserDataSource.updateUser:', error);
      throw error;
    }
  }

  /**
   * Deletar usu√°rio
   */
  async deleteUser(userId) {
    try {
      console.log('üóëÔ∏è FirestoreUserDataSource.deleteUser:', userId);
      
      await deleteDoc(doc(db, this.collection, userId));
      
      console.log('‚úÖ FirestoreUserDataSource: Usu√°rio deletado com sucesso');
    } catch (error) {
      console.error('‚ùå FirestoreUserDataSource.deleteUser:', error);
      throw error;
    }
  }

  /**
   * Verificar se usu√°rio existe
   */
  async userExists(userId) {
    try {
      const userDoc = await getDoc(doc(db, this.collection, userId));
      return userDoc.exists();
    } catch (error) {
      console.error('‚ùå FirestoreUserDataSource.userExists:', error);
      return false;
    }
  }
}