import React, { useState } from 'react';
import { View, StyleSheet, Alert } from 'react-native';
import { Button, Text, Card, ActivityIndicator } from 'react-native-paper';
import { MaterialCommunityIcons } from '@expo/vector-icons';
import locationService from '@services/locationService';
import { firestoreService } from '@services/firestoreService';
import { academyFirestoreService } from '@services/academyFirestoreService';
import { useAuth } from '@contexts/AuthProvider';
import { useUserProfile } from '@hooks/useUserProfile';
import { PROFILE_COLORS, STATUS_COLORS, APP_COLORS } from '@shared/constants/colors';
import { COLORS, SPACING, FONT_SIZE, BORDER_RADIUS, FONT_WEIGHT } from '@presentation/theme/designTokens';

const CheckInButton = ({ classId, className, onCheckInSuccess }) => {
  const [loading, setLoading] = useState(false);
  const [locationStatus, setLocationStatus] = useState(null);
  const { user } = useAuth();
  const { userProfile } = useUserProfile();

  const handleCheckIn = async () => {
    if (!user || !classId) {
      Alert.alert('Erro', 'Dados de usuÃ¡rio ou aula nÃ£o encontrados');
      return;
    }

    setLoading(true);
    setLocationStatus('Verificando localizaÃ§Ã£o...');

    try {
      // Validar localizaÃ§Ã£o
      const locationValidation = await locationService.validateCheckIn(classId);
      
      if (!locationValidation.success) {
        setLocationStatus('LocalizaÃ§Ã£o invÃ¡lida');
        Alert.alert(
          'Check-in Negado',
          locationValidation.reason,
          [{ text: 'OK', onPress: () => setLocationStatus(null) }]
        );
        return;
      }

      setLocationStatus('Registrando presenÃ§a...');

      // Criar registro de check-in
      const checkInData = {
        studentId: user.uid,
        classId: classId,
        date: new Date(),
        status: 'present',
        location: {
          latitude: locationValidation.location.latitude,
          longitude: locationValidation.location.longitude,
          accuracy: locationValidation.location.accuracy,
          distance: locationValidation.distance
        },
        timestamp: locationValidation.timestamp,
        createdAt: new Date(),
        updatedAt: new Date()
      };

      // Buscar a turma do usuÃ¡rio para fazer check-in na subcoleÃ§Ã£o
      const studentClasses = await academyFirestoreService.getWhere(
        'classes', 
        'students', 
        'array-contains', 
        user.uid, 
        userProfile.academiaId
      );
      
      if (studentClasses.length === 0) {
        throw new Error('Nenhuma turma encontrada para este usuÃ¡rio');
      }
      
      // Usar a primeira turma encontrada
      const classId = studentClasses[0].id;
      
      await academyFirestoreService.addSubcollectionDocument(
        'classes',
        classId,
        'checkIns',
        checkInData,
        userProfile.academiaId
      );

      setLocationStatus('Check-in realizado!');
      
      Alert.alert(
        'Sucesso! âœ…',
        `Check-in realizado na aula de ${className}!\n\nDistÃ¢ncia da academia: ${locationValidation.distance}m`,
        [
          {
            text: 'OK',
            onPress: () => {
              setLocationStatus(null);
              if (onCheckInSuccess) {
                onCheckInSuccess(checkInData);
              }
            }
          }
        ]
      );

    } catch (error) {
      console.error('Erro no check-in:', error);
      setLocationStatus('Erro no check-in');
      
      Alert.alert(
        'Erro',
        'NÃ£o foi possÃ­vel realizar o check-in. Tente novamente.',
        [{ text: 'OK', onPress: () => setLocationStatus(null) }]
      );
    } finally {
      setLoading(false);
    }
  };

  const getStatusColor = () => {
    if (locationStatus?.includes('invÃ¡lida')) return STATUS_COLORS.error;
    if (locationStatus?.includes('realizado')) return STATUS_COLORS.success;
    return STATUS_COLORS.warning;
  };

  return (
    <Card style={styles.container}>
      <Card.Content>
        <View style={styles.header}>
          <MaterialCommunityIcons 
            name="map-marker-check" 
            size={24} 
            color={PROFILE_COLORS.student.primary} 
          />
          <Text style={styles.title}>Check-in com LocalizaÃ§Ã£o</Text>
        </View>

        {locationStatus && (
          <View style={[styles.statusContainer, { backgroundColor: getStatusColor() + '20' }]}>
            <MaterialCommunityIcons 
              name="information" 
              size={16} 
              color={getStatusColor()} 
            />
            <Text style={[styles.statusText, { color: getStatusColor() }]}>
              {locationStatus}
            </Text>
          </View>
        )}

        <Text style={styles.description}>
          VocÃª precisa estar na academia para fazer check-in
        </Text>

        <Button
          mode="contained"
          onPress={handleCheckIn}
          disabled={loading}
          style={styles.button}
          icon={loading ? undefined : "map-marker-check"}
          contentStyle={styles.buttonContent}
        >
          {loading ? (
            <View style={styles.loadingContainer}>
              <ActivityIndicator color={APP_COLORS.COLORS.COLORS.white} size="small" />
              <Text style={styles.loadingText}>Verificando...</Text>
            </View>
          ) : (
            'Fazer Check-in'
          )}
        </Button>

        <Text style={styles.hint}>
          ðŸ’¡ Certifique-se de estar dentro da academia
        </Text>
      </Card.Content>
    </Card>
  );
};

const styles = StyleSheet.create({
  container: {
    margin: SPACING.base,
    elevation: 4,
    borderRadius: BORDER_RADIUS.md,
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: SPACING.md,
  },
  title: {
    fontSize: FONT_SIZE.lg,
    fontWeight: FONT_WEIGHT.semibold,
    marginLeft: 8,
    color: 'COLORS.text.primary',
  },
  statusContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    padding: SPACING.sm,
    borderRadius: BORDER_RADIUS.md,
    marginBottom: SPACING.md,
  },
  statusText: {
    marginLeft: 8,
    fontSize: FONT_SIZE.base,
    fontWeight: FONT_WEIGHT.medium,
  },
  description: {
    fontSize: FONT_SIZE.base,
    color: 'COLORS.text.secondary',
    marginBottom: 16,
    textAlign: 'center',
  },
  button: {
    marginVertical: 8,
    borderRadius: 25,
    elevation: 2,
  },
  buttonContent: {
    paddingVertical: SPACING.sm,
  },
  loadingContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
  },
  loadingText: {
    color: APP_COLORS.COLORS.COLORS.white,
    marginLeft: 8,
    fontSize: FONT_SIZE.md,
  },
  hint: {
    fontSize: FONT_SIZE.sm,
    color: 'COLORS.gray[500]',
    textAlign: 'center',
    marginTop: SPACING.sm,
    fontStyle: 'italic',
  },
});

export default CheckInButton;
